/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'c'
}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // LSP4J
    implementation group: 'org.eclipse.lsp4j', name: 'org.eclipse.lsp4j', version: '0.12.0'

    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'


    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    implementation 'com.google.code.gson:gson:2.9.1'

    implementation 'com.github.jakobkhansen:java-tree-sitter:master-SNAPSHOT'

    implementation 'org.apache.commons:commons-pool2:2.11.1'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
}


application {
    // Define the main class for the application.
    mainClass = 'CCDetect.lsp.App'
    applicationDefaultJvmArgs = ["-XX:+PreserveFramePointer"]
}

test {
    testLogging.showStandardStreams = true
    testLogging {
		events "failed"
		exceptionFormat "full"
	}
    minHeapSize = "128m" // initial heap size
    maxHeapSize = "4096m" // maximum heap size
}

task evaluateBigCloneBench(type: JavaExec) {
    systemProperty "bcbPath", System.getProperty("bcbPath")
    group = "Execution"
    description = "Evaluate Big Clone Bench"
    classpath = sourceSets.main.runtimeClasspath
    main = 'CCDetect.lsp.evaluation.BigCloneBenchEvaluation'
    minHeapSize = "128m" // initial heap size
    maxHeapSize = "4096m" // maximum heap size
}

task evaluateIncrementalPerformance(type: JavaExec) {
    systemProperty "root", System.getProperty("root")
    systemProperty "outputFile", System.getProperty("outputFile")
    systemProperty "mode", System.getProperty("mode")
    group = "Execution"
    description = "Evaluate incremental performance"
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs "-Xmx60g -Xmn3g -XX:+UseParallelOldGC"
    main = 'CCDetect.lsp.evaluation.IncrementalPerformanceEvaluation'
    minHeapSize = "128m" // initial heap size
    maxHeapSize = "4096m" // maximum heap size
}

task generateTest(type: JavaExec) {
    systemProperty "root", System.getProperty("root")
    systemProperty "fileType", System.getProperty("fileType")
    systemProperty "changes", System.getProperty("changes")
    systemProperty "versions", System.getProperty("versions")
    systemProperty "minSize", System.getProperty("minSize")
    systemProperty "maxSize", System.getProperty("maxSize")
    group = "Execution"
    description = "Generate evaluation test"
    classpath = sourceSets.main.runtimeClasspath
    main = 'CCDetect.lsp.evaluation.GenerateEvaluationTest'
}
